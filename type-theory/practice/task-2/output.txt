cd src && rm -f parser.mli parser.ml lexer.ml *.c* *.o*
rm -f main.exe hw2.zip
ocamllex src/lexer.mll 
9 states, 367 transitions, table size 1522 bytes
ocamlyacc src/parser.mly
cd src && ocamlc  -c tree.ml
cd src && ocamlc  str.cma tree.ml parser.mli parser.ml lexer.ml main.ml -o ../main.exe
./main.exe
g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)) |- ((g (\f.(\x.(f (f (f x)))))) (\a.(\b.(a b)))) : t1 [rule #2]
*   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)) |- (g (\f.(\x.(f (f (f x)))))) : (((t13 -> t14) -> (t13 -> t14)) -> t1) [rule #2]
*   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)) |- g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)) [rule #1]
*   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)) |- (\f.(\x.(f (f (f x))))) : ((t9 -> t9) -> (t9 -> t9)) [rule #3]
*   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), f : (t9 -> t9) |- (\x.(f (f (f x)))) : (t9 -> t9) [rule #3]
*   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), f : (t9 -> t9), x : t9 |- (f (f (f x))) : t9 [rule #2]
*   *   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), f : (t9 -> t9), x : t9 |- f : (t9 -> t9) [rule #1]
*   *   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), f : (t9 -> t9), x : t9 |- (f (f x)) : t9 [rule #2]
*   *   *   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), f : (t9 -> t9), x : t9 |- f : (t9 -> t9) [rule #1]
*   *   *   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), f : (t9 -> t9), x : t9 |- (f x) : t9 [rule #2]
*   *   *   *   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), f : (t9 -> t9), x : t9 |- f : (t9 -> t9) [rule #1]
*   *   *   *   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), f : (t9 -> t9), x : t9 |- x : t9 [rule #1]
*   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)) |- (\a.(\b.(a b))) : ((t13 -> t14) -> (t13 -> t14)) [rule #3]
*   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), a : (t13 -> t14) |- (\b.(a b)) : (t13 -> t14) [rule #3]
*   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), a : (t13 -> t14), b : t13 |- (a b) : t14 [rule #2]
*   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), a : (t13 -> t14), b : t13 |- a : (t13 -> t14) [rule #1]
*   *   *   *   g : (((t9 -> t9) -> (t9 -> t9)) -> (((t13 -> t14) -> (t13 -> t14)) -> t1)), a : (t13 -> t14), b : t13 |- b : t13 [rule #1]
